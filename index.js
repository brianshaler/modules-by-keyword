// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, defaultPath, filterByKeyword, fs, getModules, getPackageJson, path, pluckNames, _;

  path = require('path');

  _ = require('lodash');

  Promise = require('when');

  fs = require('q-io/fs');

  defaultPath = path.resolve(__dirname, '..');

  getModules = function(dir, moduleNames) {
    return Promise.all(_.map(moduleNames, function(moduleName) {
      return getPackageJson(path.join(dir, moduleName));
    })).then(function(pkgs) {
      return pkgs;
    });
  };

  getPackageJson = function(dir, moduleName) {
    var exists, pkgPath;
    exists = false;
    pkgPath = path.join(dir, 'package.json');
    return fs.exists(pkgPath).then(function(_exists) {
      if (_exists) {
        return fs.read(pkgPath);
      }
    }).then(function(contents) {
      if (contents) {
        return JSON.parse(contents);
      }
    }).then(function(obj) {
      if ((obj != null ? obj.name : void 0) === moduleName) {
        return obj;
      }
      return obj;
    })["catch"](function(err) {
      return null;
    }).then(function(obj) {
      return obj;
    });
  };

  filterByKeyword = function(keyword, modules) {
    var filtered;
    filtered = _.filter(modules, function(obj) {
      var _ref;
      return (obj != null ? (_ref = obj.keywords) != null ? _ref.length : void 0 : void 0) > 0 && -1 !== obj.keywords.indexOf(keyword);
    });
    return filtered;
  };

  pluckNames = function(objs) {
    return _.pluck(objs, 'name');
  };

  module.exports = function(keyword, dir) {
    var _filterByKeyword, _getModules;
    if (dir == null) {
      dir = defaultPath;
    }
    _getModules = _.curry(getModules)(dir);
    _filterByKeyword = _.curry(filterByKeyword)(keyword);
    return fs.list(dir).then(_getModules).then(_filterByKeyword).then(pluckNames);
  };

}).call(this);
